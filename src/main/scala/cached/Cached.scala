package org.sufrin.glyph
package cached

/**
 * A cache for a value.
 *
 * @param generate function to generate the value
 * @tparam T the type of the value
 */
class Cached[T](generate: ()=>T ) {
  private final val UNDEF: T = null.asInstanceOf[T]
  private var current: T = UNDEF
  /** Is the cache currently valid? */
  def isValid: Boolean = current!=UNDEF
  /** The currently cached value; regenerated if necessary. */
  def value: T =  {
      if (current==UNDEF) {
        val t = generate()
        current = t
      }
      current
  }
  /** Invalidate the cached value: the next `value` will regenerate the cached value*/
  def clear(): Unit = current = UNDEF
}


object Cached {
  /**
   * A `Cached[T]` (re-)generated by `generate`
   */
  def apply[T](generate:  => T): Cached[T] = new Cached(() => generate)
}
