package org.sufrin.glyph
package cached

/**
 * A cache for a value
 *
 * @param generate function to generate the value
 * @tparam T the type of the value
 */
class Cached[T](generate: ()=>T ) {
  private var current: Option[T] = None
  /** Is the cache currently valid? */
  def isValid: Boolean = current.nonEmpty
  /** The currently cached value; regenerated if necessary. */
  def value: T = current match {
    case None =>
      val t = generate()
      current = Some(t)
      t
    case Some(t) => t
  }
  /** Invalidate the cached value: the next `value` will regenerate the cached value*/
  def clear(): Unit = current = None
}


object Cached {
  /**
   * A `Cached[T]` (re-)generated by `generate`
   */
  def apply[T](generate:  => T): Cached[T] = new Cached(() => generate)
}
